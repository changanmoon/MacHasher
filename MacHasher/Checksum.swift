//
//  Checksum.swift
//  MacHasher
//
//  Created by changanmoon on 07/10/2025.
//

import Foundation
import CryptoKit

public enum ChecksumAlgorithm: Sendable {
    case md5
    case sha1
    case sha256
    case sha512
}

public enum ChecksumError: Error {
    case notAFile
    case illegibleData
}

fileprivate extension Data {
    func digest(with algorithm: ChecksumAlgorithm) -> [UInt8] {
        switch algorithm {
            case .md5: return Array(CryptoKit.Insecure.MD5.hash(data: self).makeIterator())
            case .sha1: return Array(CryptoKit.Insecure.SHA1.hash(data: self).makeIterator())
            case .sha256: return Array(CryptoKit.SHA256.hash(data: self).makeIterator())
            case .sha512: return Array(CryptoKit.SHA512.hash(data: self).makeIterator())
        }
    }
}

public extension URL {
    func checksum(with algorithm: ChecksumAlgorithm, filePath: String) throws -> String {
        // Make sure that the URL provided is a file and not a directory and that it exists.
        // If it isn't a file or does not exist, throw a `ChecksumError.notAFile` error.
        let fileManager = FileManager.default
        var isDirectory: ObjCBool = false
        guard fileManager.fileExists(atPath: filePath, isDirectory: &isDirectory),
              !isDirectory.boolValue else {
            throw ChecksumError.notAFile
        }
        
        do {
            // Read the contents of the file into a data object and generate the checksum using the digest(with:) method.
            // If the data is illegible, throw a `ChecksumError.illegibleData` error.
            let data = try Data(contentsOf: self)
            let bytes = data.digest(with: algorithm)
            
            // Convert the bytes generated by the digest(with:) method into a hexadecimal string and return it.
            return bytes.map {
                String(format: "%02x", $0)
            }.joined()
        } catch {
            throw ChecksumError.illegibleData
        }
    }
}
